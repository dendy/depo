#!/usr/bin/env python3

import os.path
import datetime
import sys
import subprocess
import shutil
import argparse
import json

import lib


script_file = os.path.realpath(__file__)
scripts_dir = os.path.dirname(script_file)


class Main:
	def __init__(self):
		self.lib = lib.Lib()

		parser = argparse.ArgumentParser()
		parser.add_argument('command')
		parser.add_argument('--sync', default=0)
		parser.add_argument('--debug')
		parser.add_argument('argv', nargs='*')
		self.args = parser.parse_args()

	def exec(self):
		if self.args.command == 'help':
			isHelp = True
			command = self.args.argv[0]
		else:
			isHelp = False
			command = self.args.command

		script = os.path.join(scripts_dir, "_" + command + ".py")

		if isHelp:
			subprocess.run([sys.executable, script, '-h'], check=True)
			sys.exit(0)

		if self.args.argv and self.args.argv[len(self.args.argv) - 1] == '.':
			self.args.argv = self.args.argv[:-1]
			self.lib.includeProjects([self.lib.projectName])
		else:
			manifestsDir = os.path.join(self.lib.rootDir, '.repo/manifests')
			p4Config = os.path.join(manifestsDir, 'config.json')
			sync = 10 if self.args.sync == 'all' else int(self.args.sync)
			if os.path.isfile(p4Config):
				sys.path.append(manifestsDir)
				from p4 import Tree as P4Tree
				projectForName = P4Tree.load(json.loads(open(p4Config, 'r').read()))
				self.lib.excludeProjects([p.localPath() for p in projectForName.values() if p.sync > sync])

		if sys.platform == 'win32':
			python_executable = 'python3'

			def find_repo_executable():
				exe = shutil.which('repo')
				if exe: return exe

				paths = os.environ.get('PATH').split(';')
				for path in paths:
					exe = os.path.join(path, 'repo')
					if os.path.isfile(exe): return exe

			repo_executable = find_repo_executable()
			if not repo_executable:
				raise RuntimeError('repo not found')

			repo = ['python3', repo_executable]
		elif sys.platform == 'darwin':
			python_executable = 'python3'
			repo = ['repo']
		else:
			python_executable = sys.executable
			repo = ['repo']

		if self.args.debug:
			timestamp = datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S')
			debug_dir = os.path.realpath(self.args.debug)
			output_dir = f'{debug_dir}/{timestamp}'

			subprocess.run(repo + ['forall', '-c', python_executable, f'{scripts_dir}/debug-launcher.py',
					f'--command={command}', f'--output={output_dir}', python_executable, script] + self.args.argv, check=True)
		else:
			subprocess.run(repo + ['forall', '-c', python_executable, script] + self.args.argv, check=True)


if __name__ == '__main__':
	Main().exec()
